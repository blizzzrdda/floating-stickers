# Design Document: Floating Sticker App
# Version: 0.1.0
# Date: 2025-04-05

# 1. Overview
# ----------------
projectName: FloatingStickers
description: |
  A desktop or web application allowing users to create, manage,
  and position multiple independent "sticky notes" or "stickers"
  containing text. Inspired by the user-provided reference image.

# 2. Goals
# ----------------
goals:
  - Provide a simple interface for capturing quick text notes.
  - Notes are auto aligned to the grid.
  - Persist notes between application sessions.
  - Mimic the visual appearance of draggable cards/notes shown in the reference image.

# 3. Core Features
# ----------------
features:
  - id: F01
    name: Note Creation
    description: User can create new, empty notes via a dedicated button or menu option. New notes appear at a default position.
  - id: F02
    name: Note Editing
    description: User can click into a note's content area and type/edit text directly.
  - id: F03
    name: Note Movement (Dragging)
    description: User can click and drag a note (likely by its body or a dedicated header area) to reposition it anywhere within the main container.
  - id: F04
    name: Note Deletion
    description: Each note has a visible control (e.g., an 'X' button) to close/delete it permanently.
    description: The content, position (and potentially size/color) of all active notes are saved when the application closes and restored when it reopens.

# 4. Technical Design
# ----------------
technical:
  architecture: Single Page Application (Web) or Electron Wrapped Web App (Desktop)
  technologyStack:
    primary:
      language: JavaScript (ES6+)
      markup: HTML5
      styling: CSS3
      framework: None (Vanilla JS) or Lightweight Frontend (e.g., Svelte, Vue - Optional)
      persistence: Browser `localStorage` (for simple persistence)
    desktopPackaging (Optional):
      platform: Electron.js
      persistenceAlternative: Node.js `fs` module for file-based saving.
  dataModel:
    notesCollection: Array of Note Objects
    noteObject:
      id: String # Unique identifier (e.g., timestamp + random number, or UUID)
      content: String # Text content of the note
      position:
        x: Number # Pixels from left edge of container
        y: Number # Pixels from top edge of container
      # Optional future additions:
      # size:
      #   width: Number
      #   height: Number
      # color: String # Background color hex/name

# 5. UI/UX Design
# ----------------
ui_ux:
  layout:
    container: A main window or div acting as the boundary for notes. Could be dark themed like the example.
    notes:
      display: Individual rectangular cards/elements.
      positioning: Absolute positioning based on saved x/y coordinates.
      stacking: Newly focused or moved notes could optionally come to the front (`z-index`).
  components:
    noteCard:
      elements:
        - Header/Drag Area (Optional, might be the whole card)
        - Content Area (Editable text block)
        - Close Button ('X' icon, typically top-right corner)
    globalControls:
      - Add Note Button (Clearly visible button or menu item)
  styling:
    noteAppearance:
      background: Light color (e.g., light yellow like the example)
      border: Subtle border or shadow for definition.
      padding: Internal padding around text content.
    typography: Clear, readable sans-serif font.
  interactions:
    drag: Standard click-hold-drag-release mechanism. Cursor changes to 'grab'/'grabbing'.
    edit: Click inside content area activates text editing mode.
    close: Single click on 'X' button removes the note (potentially with confirmation).

# 6. Future Enhancements (Optional)
# ----------------
futureEnhancements:
  - Sticker auto-resizing
  - Sticker categorization: debug, new feature, meeting notes, etc.
  - Connect to discord channel. If debug, post to #dev-bugs. If new feature, post to #feature-requests on completion.
